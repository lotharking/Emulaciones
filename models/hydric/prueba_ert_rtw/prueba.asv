/*
 * File: prueba.h
 *
 * Code generated for Simulink model 'prueba'.
 *
 * Model version                  : 1.21
 * Simulink Coder version         : 8.13 (R2017b) 24-Jul-2017
 * C/C++ source code generated on : Mon Feb 17 11:16:36 2020
 *
 * Target selection: ert.tlc
 * Embedded hardware selection: AMD->x86-64 (Windows64)
 * Code generation objectives:
 *    1. Execution efficiency
 *    2. RAM efficiency
 * Validation result: Not run
 */

#ifndef RTW_HEADER_prueba_h_
#define RTW_HEADER_prueba_h_
#include <math.h>
#ifndef prueba_COMMON_INCLUDES_
# define prueba_COMMON_INCLUDES_
#include "rtwtypes.h"
#include "rtw_continuous.h"
#include "rtw_solver.h"
#endif                                 /* prueba_COMMON_INCLUDES_ */

/* Macros for accessing real-time model data structure */
#ifndef rtmGetErrorStatus
# define rtmGetErrorStatus(rtm)        ((rtm)->errorStatus)
#endif

#ifndef rtmSetErrorStatus
# define rtmSetErrorStatus(rtm, val)   ((rtm)->errorStatus = (val))
#endif

#ifndef rtmGetT
# define rtmGetT(rtm)                  (rtmGetTPtr((rtm))[0])
#endif

/* Forward declaration for rtModel */
typedef struct tag_RTM RT_MODEL;

/* Block signals and states (auto storage) for system '<Root>' */
typedef struct {
  real_T DiscreteTransferFcn_states_i[2];/* '<S7>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn1_states[2];/* '<S7>/Discrete Transfer Fcn1' */
  real_T DiscreteTransferFcn_states_h[2];/* '<S8>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn1_states_p[2];/* '<S8>/Discrete Transfer Fcn1' */
  real_T DiscreteTransferFcn_states_b[2];/* '<S9>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn1_states_g[2];/* '<S9>/Discrete Transfer Fcn1' */
  real_T Sum2;                         /* '<S7>/Sum2' */
  real_T Sum2_n;                       /* '<S8>/Sum2' */
  real_T Sum2_l;                       /* '<S9>/Sum2' */
  real_T Vq;                           /* '<S13>/Fcn1' */
  real_T Vd;                           /* '<S13>/Fcn2' */
  real_T Vq_f;                         /* '<S14>/Fcn1' */
  real_T Vd_p;                         /* '<S14>/Fcn2' */
  real_T DiscreteTransferFcn_states;   /* '<Root>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn_states_d; /* '<S3>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn_states_f; /* '<S1>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn_states_n; /* '<S4>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn_states_o; /* '<S2>/Discrete Transfer Fcn' */
  real_T Memory2_PreviousInput;        /* '<Root>/Memory2' */
  real_T Memory3_PreviousInput;        /* '<Root>/Memory3' */
  real_T DiscreteTransferFcn_tmp;      /* '<S3>/Discrete Transfer Fcn' */
  real_T Memory_PreviousInput;         /* '<Root>/Memory' */
  real_T DiscreteTransferFcn_tmp_j;    /* '<S1>/Discrete Transfer Fcn' */
  real_T Memory1_PreviousInput;        /* '<Root>/Memory1' */
  real_T DiscreteTransferFcn_tmp_b;    /* '<S4>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn_tmp_c;    /* '<S2>/Discrete Transfer Fcn' */
  real_T DiscreteTransferFcn_tmp_d;    /* '<S7>/Discrete Transfer Fcn' */
  real_T Memory_PreviousInput_m;       /* '<S7>/Memory' */
  real_T DiscreteTransferFcn1_tmp;     /* '<S7>/Discrete Transfer Fcn1' */
  real_T DiscreteTransferFcn_tmp_dp;   /* '<S8>/Discrete Transfer Fcn' */
  real_T Memory1_PreviousInput_g;      /* '<S8>/Memory1' */
  real_T DiscreteTransferFcn1_tmp_j;   /* '<S8>/Discrete Transfer Fcn1' */
  real_T DiscreteTransferFcn_tmp_ca;   /* '<S9>/Discrete Transfer Fcn' */
  real_T Memory1_PreviousInput_a;      /* '<S9>/Memory1' */
  real_T DiscreteTransferFcn1_tmp_ju;  /* '<S9>/Discrete Transfer Fcn1' */
} DW;

/* External inputs (root inport signals with auto storage) */
typedef struct {
  real_T Rs;                           /* '<Root>/Rs' */
} ExtU;

/* External outputs (root outports fed by signals with auto storage) */
typedef struct {
  real_T Vd;                           /* '<Root>/Vd' */
  real_T Vq;                           /* '<Root>/Vq' */
  real_T Mabc[3];                      /* '<Root>/Mabc' */
  real_T Md;                           /* '<Root>/Md' */
  real_T Mq;                           /* '<Root>/Mq' */
} ExtY;

/* Real-time Model Data Structure */
struct tag_RTM {
  const char_T * volatile errorStatus;
  RTWSolverInfo solverInfo;

  /*
   * Timing:
   * The following substructure contains information regarding
   * the timing information for the model.
   */
  struct {
    uint32_T clockTick0;
    time_T stepSize0;
    uint32_T clockTick1;
    SimTimeStep simTimeStep;
    time_T *t;
    time_T tArray[2];
  } Timing;
};

/* Block signals and states (auto storage) */
extern DW rtDW;

/* External inputs (root inport signals with auto storage) */
extern ExtU rtU;

/* External outputs (root outports fed by signals with auto storage) */
extern ExtY rtY;

/* Model entry point functions */
extern void prueba_initialize(void);
extern void prueba_step(void);


//Funciones creadas por el programador set y get
//-------Funciones para asignar entradas-------------

extern void set_R(double);

//-----Funciones para obtener valores de las salidas-------
	
extern double get_Vd(void);
extern double get_Vq(void);
extern double get_Md(void);
double get_Mq(void);
double get_Mabc(void);
/* Real-time Model object */
extern RT_MODEL *const rtM;

/*-
 * These blocks were eliminated from the model due to optimizations:
 *
 * Block '<S13>/Gain1' : Unused code path elimination
 * Block '<S13>/Sum4' : Unused code path elimination
 * Block '<S14>/Gain1' : Unused code path elimination
 * Block '<S14>/Sum4' : Unused code path elimination
 * Block '<S1>/Derivative Divisor' : Eliminated nontunable gain of 1
 * Block '<S2>/Derivative Divisor' : Eliminated nontunable gain of 1
 * Block '<S3>/Derivative Divisor' : Eliminated nontunable gain of 1
 * Block '<S4>/Derivative Divisor' : Eliminated nontunable gain of 1
 */

/*-
 * The generated code includes comments that allow you to trace directly
 * back to the appropriate location in the model.  The basic format
 * is <system>/block_name, where system is the system number (uniquely
 * assigned by Simulink) and block_name is the name of the block.
 *
 * Use the MATLAB hilite_system command to trace the generated code back
 * to the model.  For example,
 *
 * hilite_system('<S3>')    - opens system 3
 * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3
 *
 * Here is the system hierarchy for this model
 *
 * '<Root>' : 'prueba'
 * '<S1>'   : 'prueba/Ctr Id'
 * '<S2>'   : 'prueba/Ctr Iq'
 * '<S3>'   : 'prueba/Ctr Vod'
 * '<S4>'   : 'prueba/Ctr Voq'
 * '<S5>'   : 'prueba/Desacople dinamica de corriente'
 * '<S6>'   : 'prueba/Sin_Cos_Gen'
 * '<S7>'   : 'prueba/Subsystem'
 * '<S8>'   : 'prueba/Subsystem1'
 * '<S9>'   : 'prueba/Subsystem2'
 * '<S10>'  : 'prueba/abc2dq1'
 * '<S11>'  : 'prueba/abc2dq2'
 * '<S12>'  : 'prueba/dq0_to_abc Transformation'
 * '<S13>'  : 'prueba/abc2dq1/abc_to_dq0 Transformation'
 * '<S14>'  : 'prueba/abc2dq2/abc_to_dq0 Transformation'
 */
#endif                                 /* RTW_HEADER_prueba_h_ */

/*
 * File trailer for generated code.
 *
 * [EOF]
 */
